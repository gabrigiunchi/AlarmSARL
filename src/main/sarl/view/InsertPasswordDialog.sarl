package view

import io.sarl.core.Initialize
import javax.swing.JDialog
import javax.swing.JFrame
import javax.swing.JDialog.ModalityType
import javax.swing.JPasswordField
import javax.swing.JButton
import java.awt.GridBagLayout
import java.awt.GridBagConstraints
import javax.swing.JLabel
import java.awt.Insets
import javax.swing.JPanel
import java.awt.FlowLayout
import javax.swing.BorderFactory
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.Logging
import io.sarl.core.Destroy
import utilities.UserSettings
import javax.swing.JOptionPane
import java.awt.Window

/**
 * @author Gabriele Giunchi
 * 
 * Dialog per l'inserimento della password necessaria al completamento di alcune azioni
 *
 */
agent InsertPasswordDialog {
	
	uses DefaultContextInteractions, Lifecycle, Schedules, Logging
	
	/*
	 * Casi in cui viene utilizzato il dialog per l'inserimento della password,
	 * a seconda del contesto cambia leggermente l'interfaccia grafica
	 */
	val login = 1
	val deactivateAlarm = 2
	val defaultModality = login
	
	var dialog : Window
	
	on Initialize {
		var modality = defaultModality
	
		if(!occurrence.parameters.empty) {
			modality = occurrence.parameters.get(0) as Integer
		}
		
		if(modality == deactivateAlarm) {
			val parentFrame = occurrence.parameters.get(1) as Window
			dialog = new JDialog(parentFrame, ModalityType.APPLICATION_MODAL)
			(dialog as JDialog).setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE)
			
		} else {
			dialog = new JFrame()
		 	(dialog as JFrame).setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE)
		}
		
		dialog.locationRelativeTo = null
		
		val label = new JLabel("Inserisci la password")
		val passwordField = new JPasswordField(20)
		val okButton = new JButton("Ok")
		okButton.addActionListener[checkPassword(new String(passwordField.password))]
		
		dialog.setLayout(new GridBagLayout)
		val constraints = new GridBagConstraints
		constraints.gridy = 0
		constraints.gridx = 0
		constraints.insets = new Insets(10, 10, 0, 10)
		
		val sudPanel = new JPanel(new FlowLayout)
		sudPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0))
		sudPanel.add(okButton)
		if(modality == deactivateAlarm) {
			val cancelButton = new JButton("Cancel")
			cancelButton.addActionListener[dialog.dispose]
			sudPanel.add(cancelButton)
		}
		
		dialog.add(label, constraints)
		constraints.gridy++
		dialog.add(passwordField, constraints)
		constraints.gridy++
		dialog.add(sudPanel, constraints)
		
		dialog.pack
		dialog.validate
		dialog.setVisible(true)
		
		in(1000)[every(50,[
			if(!dialog.displayable) {
				killMe
			}
		])]
	}
	
	on PasswordCorrect {
		dialog.dispose
		killMe
	}
	
	private def checkPassword(passwordTyped : String) {
		in(0)[
			if(passwordTyped.equals(UserSettings.password)) {
				emit(new PasswordCorrect)
			} else {
				JOptionPane.showMessageDialog(dialog, "Password errata", "Error", JOptionPane.ERROR_MESSAGE)
			}	
		]	
	}
	
	on Destroy {
		info("Destroying InsertPasswordDialog...")
	}
}